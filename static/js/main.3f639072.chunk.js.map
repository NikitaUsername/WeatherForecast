{"version":3,"sources":["helpers/helpersfunctions.js","components/Header.js","actions/localWeatherActions.js","components/WeatherData.js","components/Weather.js","components/Saved.js","actions/savedCitiesActions.js","components/SavedHeader.js","App.js","serviceWorker.js","reducers/initialState.js","reducers/store.js","index.js"],"names":["findWeatherByName","name","a","fetch","api_url","json","data","addToStorage","list","localStorage","getItem","cities","setItem","JSON","stringify","jsonlist","parse","newlist","push","toUpperFirst","string","charAt","toUpperCase","slice","toLowerCase","deleteFromStorage","index","findIndex","city","splice","errorCallback","findWeather","coords","latitude","longitude","position","console","log","Header","this","props","gettingWeather","className","id","onClick","React","Component","defaultProps","weatherMethod","f","mapDispatchToProps","dispatch","type","weather","navigator","geolocation","getCurrentPosition","pos","error","connect","WeatherData","weatherData","description","main","pressure","wind","speed","clouds","all","Weather","weatherInfo","pic","icon","src","temp","color","state","localWeather","Saved","addWeather","cityName","favoriteCities","find","deleteCity","aria-hidden","then","SavedHeader","cityAdd","event","preventDefault","addCity","target","value","onSubmit","placeholder","map","key","currentState","payload","turn","App","handleClose","handleModal","Modal","show","showModal","onHide","animation","closeButton","Title","Body","modalText","Footer","Button","variant","Boolean","window","location","hostname","match","initialState","getCities","store","action","newCity","createStore","Cities","applyMiddleware","thunk","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f639072.chunk.js","sourcesContent":["\r\nexport async function findWeatherByName(name) {\r\n  const api_url = await\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${name}&units=metric&APPID=1db91134dffc102e728e7a3d0ad5eb23`);\r\n  const data = await api_url.json();\r\n  return data;\r\n}\r\n\r\nexport function addToStorage(name) {\r\n  const list = localStorage.getItem('list');\r\n  if (list === null) {\r\n    let cities = {\r\n      cities: [name]\r\n    }\r\n    localStorage.setItem('list', JSON.stringify(cities))\r\n\r\n  }\r\n  else {\r\n    const jsonlist = JSON.parse(list);\r\n    const add = jsonlist.cities.push(name);\r\n    const newlist = jsonlist;\r\n    localStorage.setItem('list', JSON.stringify(newlist))\r\n  }\r\n}\r\n\r\nexport function toUpperFirst(string){\r\n  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n}\r\n\r\n\r\n\r\nexport function deleteFromStorage(name) {\r\n  const list = localStorage.getItem('list');\r\n  const jsonlist = JSON.parse(list);\r\n  const index = jsonlist.cities.findIndex(city => city === name);\r\n  jsonlist.cities.splice(index, 1);\r\n  const newlist = jsonlist;\r\n  localStorage.setItem('list', JSON.stringify(newlist))\r\n}\r\n\r\nexport async function errorCallback() {\r\n  var positionanalog = {\r\n    coords: {\r\n      latitude: 59.93,\r\n      longitude: 30.31\r\n    }\r\n  };\r\n  const data = findWeather(positionanalog);\r\n  return data;\r\n}\r\n\r\n\r\n\r\nexport async function findWeather(position) {\r\n    console.log(position);\r\n    const api_url = await\r\n      fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&APPID=1db91134dffc102e728e7a3d0ad5eb23`);\r\n    const data = await api_url.json();\r\n    return data;\r\n}","import React from \"react\";\r\n\r\nimport { gettingWeather } from \"../actions/localWeatherActions\"\r\nimport { connect } from 'react-redux';\r\n\r\nclass Header extends React.Component {\r\n    componentDidMount() {\r\n        this.props.gettingWeather();\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-4\">\r\n                        <h2 id=\"title\">\r\n                            Погода здесь\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"col-lg-4\">\r\n                        <button id=\"update-button\" onClick={this.props.gettingWeather}>\r\n                            Обновить\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n Header.defaultProps = {\r\n  \r\n     weatherMethod: f => f\r\n };\r\nconst mapDispatchToProps = {\r\n  gettingWeather: gettingWeather,\r\n}\r\n\r\nexport default connect( '', mapDispatchToProps)(Header)","import { findWeather } from '../helpers/helpersfunctions'\r\nimport { errorCallback } from '../helpers/helpersfunctions'\r\n\r\n\r\n\r\n\r\nexport function gettingWeather() {\r\n  return async function (dispatch) {\r\n    dispatch({ type: 'ADD_LOCAL_WEATHER', weather: '' });\r\n    navigator.geolocation.getCurrentPosition(\r\n      async pos => {\r\n        const data = await findWeather(pos);\r\n        dispatch({ type: 'ADD_LOCAL_WEATHER', weather: data });\r\n      },\r\n      async error => {\r\n        const data = await errorCallback();\r\n        dispatch({ type: 'ADD_LOCAL_WEATHER', weather: data });\r\n      }\r\n    )\r\n  }\r\n\r\n};\r\n","import React from \"react\";\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { connect } from 'react-redux';\r\n\r\nclass WeatherData extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"col-lg-6\">\r\n                <div className='row' id=\"string\">\r\n                    <p>Погода</p>\r\n                    <div className='val'> {this.props.weatherData.weather[0].description} </div>\r\n                </div>\r\n                <div className='row' id=\"string\">\r\n                    <p>Давление</p>\r\n                    <div className='val'  > {this.props.weatherData.main.pressure} hPA</div>\r\n                </div>\r\n                <div className='row' id=\"string\">\r\n                    <p>Скорость ветра</p>\r\n                    <div className='val'  > {this.props.weatherData.wind.speed} m/s</div>\r\n                </div>\r\n                <div className='row' id=\"string\">\r\n                    <p>Облачность</p>\r\n                    <div className='val'  > {this.props.weatherData.clouds.all} %</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default (WeatherData)","import React from \"react\";\r\nimport { ClipLoader } from 'react-spinners';\r\nimport { connect } from 'react-redux';\r\nimport WeatherData from \"./WeatherData\"\r\n\r\nclass Weather extends React.Component {\r\n\r\n\r\n    render() {\r\n        if (this.props.weatherInfo.weather) {\r\n            var pic = \"http://openweathermap.org/img/wn/\" + this.props.weatherInfo.weather[0].icon + \"@2x.png\"\r\n            return (\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <h2 id=\"cityname\">\r\n                                {this.props.weatherInfo.name}\r\n                            </h2>\r\n                            <div className=\"row\">\r\n                                <img id=\"pic\" src={pic}></img>\r\n                                <p id=\"temp\"> {this.props.weatherInfo.main.temp} ºC </p>\r\n                            </div>\r\n\r\n                        </div>\r\n                        \r\n                            <WeatherData weatherData={this.props.weatherInfo}/>\r\n                        \r\n                    </div>\r\n                </div>\r\n\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12\">\r\n                            <h2 id=\"waiting\">\r\n                                Подождите, данные загружаются\r\n                        </h2>\r\n                        </div>\r\n                        <div className=\"col-lg-12 \">\r\n                            <div className=\"center-block\">\r\n                                <ClipLoader color='#d3d3d3' />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        weatherInfo: state.localWeather\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Weather)","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { connect } from 'react-redux';\r\nimport { addWeather, deleteCity } from '../actions/savedCitiesActions'\r\nimport { ClipLoader } from 'react-spinners';\r\nimport * as PropTypes from 'prop-types';\r\nimport WeatherData from \"./WeatherData\"\r\n\r\nclass Saved extends React.Component {\r\n    componentDidMount() {\r\n        this.props.addWeather(this.props.cityName);\r\n        const city = this.props.favoriteCities.find(city => city.name === this.props.cityName);\r\n    }\r\n    render() {\r\n        const city = this.props.favoriteCities.find(city => city.name === this.props.cityName);\r\n\r\n        if (city.weather.weather) {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-4\">\r\n                            <h2 id=\"cityname\">\r\n                                {city.name}\r\n                            </h2>\r\n                        </div>\r\n                        <WeatherData weatherData={city.weather} />\r\n                        <div className=\"col-lg-2\" >\r\n                            <button className=\"close\" onClick={() => this.props.deleteCity(city.name)}>\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-12\">\r\n                            <h2 id=\"waiting\">\r\n                                Подождите, данные загружаются\r\n                            </h2>\r\n                        </div>\r\n                        <div className=\"col-lg-12 \">\r\n                            <div className=\"center-block\">\r\n                                <ClipLoader color='#d3d3d3' />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    addWeather: addWeather,\r\n    deleteCity: deleteCity\r\n};\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        favoriteCities: state.cities\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Saved);","import { findWeatherByName, deleteFromStorage } from '../helpers/helpersfunctions'\r\nimport { addToStorage } from '../helpers/helpersfunctions'\r\nimport { toUpperFirst } from '../helpers/helpersfunctions'\r\n\r\nexport function addCity(cityName, currentState) {\r\n    console.log(cityName);\r\n    cityName = toUpperFirst(cityName);\r\n    return async function (dispatch) {\r\n        if (!cityName) {\r\n            dispatch({ type: 'SHOW_HIDE_MODAL', payload: 'Please enter the city', turn: 'true' });\r\n            return;\r\n        } else {\r\n            if (currentState.findIndex(city => city.name === cityName) === -1) {\r\n                findWeatherByName(cityName)\r\n                    .then(function (data) {\r\n                        if (data.clouds) {\r\n                            dispatch({ type: 'ADD_CITY', name: cityName });\r\n                            addToStorage(cityName);\r\n                        } else {\r\n                            dispatch({ type: 'SHOW_HIDE_MODAL', payload: 'City not found', turn: 'true' });\r\n                            return;\r\n                        }\r\n                    })\r\n            }\r\n            else {\r\n                dispatch({ type: 'SHOW_HIDE_MODAL', payload: 'This city is already added', turn: 'true' });\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function deleteCity(cityName) {\r\n    return async function (dispatch) {\r\n        dispatch({ type: 'DELETE_CITY', name: cityName });\r\n        deleteFromStorage(cityName);\r\n    }\r\n}\r\n\r\nexport function addWeather(cityName) {\r\n    return async function (dispatch) {\r\n        findWeatherByName(cityName)\r\n            .then(function (data) {\r\n                dispatch({ type: 'ADD_WEATHER', name: cityName, weather: data });\r\n                console.log(data);\r\n            })\r\n    }\r\n}\r\n\r\nexport function handleModal() {\r\n    return async function (dispatch) {\r\n        dispatch({ type: 'SHOW_HIDE_MODAL', payload: '', turn: false });\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport { addCity } from \"../actions/savedCitiesActions\"\r\nimport { connect } from 'react-redux';\r\nimport Saved from \"./Saved\"\r\nclass SavedHeader extends React.Component {\r\n    cityAdd = event => {\r\n        event.preventDefault();\r\n       \r\n        this.props.addCity(event.target[0].value, this.props.favoriteCities);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-4\">\r\n                        <h2 id=\"title\">\r\n                            Избранное\r\n                        </h2>\r\n                    </div>\r\n                    <div className=\"col-lg-6\">\r\n                        <form onSubmit={this.cityAdd}>\r\n                            <input id=\"inputfld\" placeholder=\"Город\"></input>\r\n                            <input id=\"update-button\" type='submit' value= \"Добавить в избранное\"></input>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                {this.props.favoriteCities.map(city => (\r\n                    <Saved\r\n                        key={city.name}\r\n                        cityName={city.name}\r\n                        \r\n                    />\r\n                ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        favoriteCities: state.cities\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    addCity: addCity,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedHeader)","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport Weather from \"./components/Weather\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport SavedHeader from \"./components/SavedHeader\";\r\nimport { connect } from 'react-redux';\r\nimport { handleModal } from './actions/savedCitiesActions'\r\n\r\nclass App extends React.Component {\r\n\r\n  handleClose = () => {\r\n    this.props.handleModal();\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Modal show={this.props.showModal} onHide={this.handleClose} animation={false}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Error</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>{this.props.modalText}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"primary\" onClick={this.handleClose} >\r\n              Ok\r\n                        </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n        <Header />\r\n        <Weather />\r\n        <SavedHeader />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    showModal: state.showModal,\r\n    modalText: state.modalText\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  handleModal: handleModal\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {toUpperFirst} from '../helpers/helpersfunctions'\r\n\r\n function getCities() {\r\n    const list = JSON.parse(localStorage.getItem('list'));\r\n    \r\n    if (list === null) return [];\r\n\r\n    const cityList = list.cities.map(name => {\r\n        return {\r\n            name: toUpperFirst(name),\r\n            weather: {}\r\n        };\r\n    });\r\n    \r\n    return cityList;\r\n}\r\n\r\n\r\nconst initialState = {\r\n    cities: getCities(),\r\n    localWeather: [],\r\n    showModal: false,\r\n    modalText: ''\r\n};\r\n\r\nexport default initialState;","import initialState from \"./initialState\";\r\nimport { bindActionCreators } from \"redux\";\r\n\r\n\r\nfunction store(state = initialState, action){\r\n    switch(action.type){\r\n        case 'ADD_CITY':{\r\n            const cities = [...state.cities];\r\n            const newCity = {\r\n                name: action.name,\r\n                weather: []\r\n            }\r\n            cities.push(newCity);\r\n            return{\r\n                ...state,\r\n                cities\r\n            };\r\n        }\r\n\r\n        case 'DELETE_CITY':{\r\n            const cities = [...state.cities];\r\n            const index = cities.findIndex(city => city.name === action.name);\r\n            cities.splice(index, 1);\r\n            return{\r\n                ...state,\r\n                cities\r\n            };\r\n        }\r\n        \r\n        case 'ADD_WEATHER':{\r\n            const cities = [...state.cities];\r\n            const index = cities.findIndex(city => city.name === action.name);\r\n            cities[index] = {\r\n                ...cities[index],\r\n                weather: action.weather\r\n            };\r\n            return{\r\n                ...state,\r\n                cities\r\n            };\r\n        }\r\n\r\n\r\n        case 'ADD_LOCAL_WEATHER':{\r\n            return{\r\n                ...state,\r\n                localWeather: action.weather\r\n            };\r\n        }\r\n\r\n        case 'SHOW_HIDE_MODAL': {\r\n            return{\r\n                ...state,\r\n                showModal: action.turn,\r\n                modalText: action.payload\r\n            };\r\n        }\r\n\r\n        default: return state = initialState;\r\n    }\r\n};\r\nexport default store;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\"\r\nimport Cities from \"./reducers/store\"\r\nimport { Provider } from 'react-redux';\r\n\r\nvar store = createStore(Cities, {}, applyMiddleware(thunk));\r\n\r\nReactDOM.render(<Provider store={store}> <App /></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}